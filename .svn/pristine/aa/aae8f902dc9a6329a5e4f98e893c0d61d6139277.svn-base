package ca.uwaterloo.lab2_201_24;

import ca.uwaterloo.sensortoy.LineGraphView;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.widget.Button;
import android.widget.TextView;

public class AccelSensorEventListener implements SensorEventListener {

	private TextView output;
	private float[] maxAccelF  = new float[3];
	private float[] values = {0,0,0};
	private TextView maxAccel;
	private LineGraphView graph;
	
	//Needed for Low pass filter
	private float previousLowValue = 0;
	//Needed for high pass filter
	private float previousHighValue = 0;
	private float vectorSum;
	private float steps = 0;
	private int stage = 1;
	private int iterator = 0;
	private float high = 0;
	private float low = 0;
	
    public AccelSensorEventListener(TextView accelOutput, TextView maxAccelOutput)
    {
    output = accelOutput;
    maxAccel = maxAccelOutput;
    }
    
    public float[] getValues()
	{
		return values;
	}
    
    public void zeroSteps()
	{
		steps = 0;
	}
    
    public void setGraph(LineGraphView graphIn)
	{
		graph = graphIn;
	}
	
	public LineGraphView getUpdatedGraph()
	{
		return graph;
	}
    
    public void onAccuracyChanged(Sensor s, int i) {}
    
    //Low pass filter uses the previous accel Field and the current accel variable.
    float lowpass(float in) {
  					
  					float out = previousLowValue;
  					previousHighValue = previousLowValue;
  					float l = 0.24f;
  					
  						out = l * in + (1-l) *out;
  						previousLowValue = out;
  				
  				return out;
  			}
    
 
    
    public void onSensorChanged(SensorEvent se) {
    	
    	
       vectorSum = (float) Math.pow((Math.pow(se.values[0], 2) + Math.pow(se.values[1], 2) + Math.pow(se.values[2], 2)), 1);
        
       values = se.values;
       values[0] = lowpass(vectorSum);
       
       //This is to get rid of the y and z values ont he graph
       values[1] = 0;
       values[2] = 0;
       
       graph.addPoint(values);  
        
        if((vectorSum > 8 && vectorSum < 25) || stage == 2)
        {
        	stage = 2;
        	if(vectorSum > high) { 
        		high = vectorSum;
        		}
        	else {
        		stage = 3;
        		}
        }
        
        //low = high;
        //if(vectorSum < low && stage == 3) {
        //	low = vectorSum;
        //	
        //	if(low < 6) {
        //		steps++;
        //		stage = 1;
        //	}
       // }
        //System.out.println(vectorSum);
        
        //This is stage 3, the data must drop to below 20% of the max in stage 2 for atleast 18 iteratorations.
        //This is to stop one from simply shaking the device to generate steps.
        if(vectorSum < high*0.2 && stage == 3 )
        {
        	iterator++;
        }
        else if(iterator > 19) {
        	iterator = 0;
        	}
        
        //If the value in stage 3 stays below 20% of max for a sufficient time then we count the step and set stage back to 1.
        if(iterator == 19)
        {
        	steps++;
        	iterator = 0;
        	stage = 1;
        }
    	
       if (se.sensor.getType() == Sensor.TYPE_LINEAR_ACCELERATION) {
    	  
		     output.setText(String.format("\nAcceleration:\nVector Sum: (%f)\n steps:(%f)", se.values[0], steps));

		     output.setTextColor(Color.BLACK);
    	  
		if(Math.abs(se.values[0]) > Math.abs(maxAccelF[0])) {
          	maxAccelF[0] = se.values[0];
          }
          if(Math.abs(se.values[1]) > Math.abs(maxAccelF[1])) {
          	maxAccelF[1] = se.values[1];
          }
          if(Math.abs(se.values[2]) > Math.abs(maxAccelF[2])) {
          	maxAccelF[2] = se.values[2];
          }
          
          
		maxAccel.setText(String.format("Max Acceleration:\nMax Sum: (%f)",
                          				maxAccelF[0]));
		maxAccel.setTextColor(Color.MAGENTA);
      }
    }

	private Button findViewById(int button12) {
		// TODO Auto-generated method stub
		return null;
	} 	


	    


}

